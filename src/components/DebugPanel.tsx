import React, { useState } from 'react';
import { Bug, Database, User, Trash2, Wifi, Settings } from 'lucide-react';
import { directSupabaseService } from '../services/directSupabaseService';

interface DebugPanelProps {
  user: any;
  onRefresh: () => void;
}

export const DebugPanel: React.FC<DebugPanelProps> = ({ user, onRefresh }) => {
  const [isOpen, setIsOpen] = useState(false);
  const [loading, setLoading] = useState(false);
  const [logs, setLogs] = useState<string[]>([]);

  const addLog = (message: string) => {
    setLogs(prev => [...prev, `${new Date().toLocaleTimeString()}: ${message}`]);
  };

  const testCreateUser = async () => {
    setLoading(true);
    try {
      const testUser = {
        id: Math.floor(Math.random() * 1000000),
        first_name: 'Test',
        last_name: 'User',
        username: 'testuser'
      };
      
      addLog(`üß™ TESTING USER CREATION`);
      addLog(`üë§ Test user data: ${testUser.first_name} ${testUser.last_name} (ID: ${testUser.id})`);
      addLog(`üì° This will test the complete user creation flow...`);
      
      const result = await directSupabaseService.getOrCreateUser(testUser);
      addLog(`‚úÖ SUCCESS: User created with referral code: ${result.referral_code}`);
      addLog(`üìä User details: ID=${result.id}, Telegram=${result.telegram_id}`);
      onRefresh();
    } catch (error) {
      addLog(`‚ùå FAILED: User creation error: ${error instanceof Error ? error.message : error}`);
      
      if (error instanceof Error) {
        if (error.message.includes('tables not created')) {
          addLog(`üí° SOLUTION: Database tables missing - create them in Supabase Dashboard`);
        } else if (error.message.includes('permission')) {
          addLog(`üí° SOLUTION: RLS policy issue - check database permissions`);
        } else if (error.message.includes('Failed to fetch')) {
          addLog(`üí° SOLUTION: Connection issue - check Supabase project status`);
        } else {
          addLog(`üí° SOLUTION: Unknown error - check Supabase Dashboard for issues`);
        }
      }
    } finally {
      setLoading(false);
    }
  };

  const testStartTrial = async () => {
    if (!user) {
      addLog('‚ùå No user found to start trial');
      return;
    }

    setLoading(true);
    try {
      addLog(`Starting trial for user: ${user.id}`);
      await directSupabaseService.startTrial(user.telegram_id);
      addLog(`‚úÖ Trial started successfully`);
      onRefresh();
    } catch (error) {
      addLog(`‚ùå Error starting trial: ${error}`);
    } finally {
      setLoading(false);
    }
  };

  const testGetTrialStatus = async () => {
    if (!user) {
      addLog('‚ùå No user found to check trial');
      return;
    }

    setLoading(true);
    try {
      addLog(`Checking trial status for user: ${user.id}`);
      const status = await directSupabaseService.getUserStatus(user.telegram_id);
      addLog(`‚úÖ Trial status: ${JSON.stringify(status, null, 2)}`);
    } catch (error) {
      addLog(`‚ùå Error checking trial: ${error}`);
    } finally {
      setLoading(false);
    }
  };

  const testConnection = async () => {
    setLoading(true);
    try {
      addLog('üß™ COMPREHENSIVE SUPABASE TEST...');
      
      // Check environment first
      const url = import.meta.env.VITE_SUPABASE_URL;
      const key = import.meta.env.VITE_SUPABASE_ANON_KEY;
      
      if (!url || !key) {
        addLog('‚ùå ENVIRONMENT VARIABLES MISSING');
        addLog('üí° Click "Connect to Supabase" button to configure');
        return;
      }
      
      addLog(`üîó Supabase URL: ${url}`);
      addLog(`üîë API Key: ${key.substring(0, 20)}...`);
      
      // Test 1: Basic connectivity
      addLog('üì° Step 1: Testing basic connectivity...');
      try {
        const basicResponse = await fetch(url, { method: 'HEAD' });
        addLog(`üì° Basic connectivity: ${basicResponse.ok ? '‚úÖ OK' : '‚ùå Failed'} (${basicResponse.status})`);
      } catch (basicError) {
        addLog(`‚ùå Basic connectivity failed: ${basicError.message}`);
        addLog('üí° Check if Supabase project exists and is not paused');
        return;
      }
      
      // Test 2: API endpoint with auth
      addLog('üîê Step 2: Testing API with authentication...');
      try {
        const authResponse = await fetch(`${url}/rest/v1/`, {
          method: 'HEAD',
          headers: {
            'apikey': key,
            'Authorization': `Bearer ${key}`
          }
        });
        addLog(`üîê API Auth: ${authResponse.ok ? '‚úÖ OK' : '‚ùå Failed'} (${authResponse.status})`);
        
        if (!authResponse.ok) {
          addLog('üí° Check your API key in Supabase Dashboard ‚Üí Settings ‚Üí API');
          return;
        }
      } catch (authError) {
        addLog(`‚ùå API auth failed: ${authError.message}`);
        return;
      }
      
      // Test direct Supabase connection
      addLog('üóÑÔ∏è Step 3: Testing database tables...');
      const result = await directSupabaseService.testConnection();
      
      if (result.success) {
        addLog('‚úÖ DATABASE CONNECTION SUCCESSFUL');
        addLog('‚úÖ All tables exist and accessible');
        addLog('üí° Ready to use - no Edge Functions needed!');
      } else {
        addLog(`‚ùå DATABASE ERROR: ${result.error}`);
        
        if (result.error?.includes('tables not found')) {
          addLog('');
          addLog('üîß SOLUTION: Create database tables');
          addLog('1. Go to Supabase Dashboard ‚Üí SQL Editor');
          addLog('2. Run this SQL to create tables:');
          addLog('');
          addLog('CREATE TABLE users (');
          addLog('  id SERIAL PRIMARY KEY,');
          addLog('  telegram_id BIGINT UNIQUE NOT NULL,');
          addLog('  username TEXT,');
          addLog('  full_name TEXT,');
          addLog('  referral_code TEXT UNIQUE NOT NULL,');
          addLog('  referred_by INTEGER REFERENCES users(id),');
          addLog('  subscription_status BOOLEAN DEFAULT FALSE,');
          addLog('  subscription_link TEXT,');
          addLog('  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP');
          addLog(');');
          addLog('');
          addLog('-- Enable RLS');
          addLog('ALTER TABLE users ENABLE ROW LEVEL SECURITY;');
          addLog('');
          addLog('-- Allow public access for demo');
          addLog('CREATE POLICY "Allow all" ON users FOR ALL USING (true);');
        }
      }
      
    } catch (error) {
      addLog(`‚ùå UNEXPECTED ERROR: ${error}`);
    } finally {
      setLoading(false);
    }
  };

  const testDetailedConnection = async () => {
    setLoading(true);
    try {
      addLog('üîç –ü–û–®–ê–ì–û–í–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê SUPABASE...');
      
      // Check environment
      const hasUrl = !!import.meta.env.VITE_SUPABASE_URL;
      const hasKey = !!import.meta.env.VITE_SUPABASE_ANON_KEY;
      
      addLog(`–®–ê–ì 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è`);
      addLog(`üìç VITE_SUPABASE_URL: ${hasUrl ? '‚úÖ –ï–°–¢–¨' : '‚ùå –ù–ï–¢'}`);
      addLog(`üîë VITE_SUPABASE_ANON_KEY: ${hasKey ? '‚úÖ –ï–°–¢–¨' : '‚ùå –ù–ï–¢'}`);
      
      if (!hasUrl || !hasKey) {
        addLog('üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç!');
        addLog('üí° –†–ï–®–ï–ù–ò–ï: –ù–∞–∂–º–∏—Ç–µ "Connect to Supabase" –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É');
        return;
      }
      
      const url = import.meta.env.VITE_SUPABASE_URL;
      const key = import.meta.env.VITE_SUPABASE_ANON_KEY;
      
      addLog(`üìç –ü–æ–ª–Ω—ã–π URL: ${url}`);
      addLog(`üîë –ö–ª—é—á: ${key.substring(0, 30)}... (–¥–ª–∏–Ω–∞: ${key.length})`);
      
      // Validate URL format
      addLog(`–®–ê–ì 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ URL`);
      const urlValid = url.startsWith('https://') && url.includes('.supabase.co');
      addLog(`üìç –§–æ—Ä–º–∞—Ç URL –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π: ${urlValid ? '‚úÖ –î–ê' : '‚ùå –ù–ï–¢'}`);
      
      if (!urlValid) {
        addLog('‚ùå –û–®–ò–ë–ö–ê –§–û–†–ú–ê–¢–ê: URL –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å https://yourproject.supabase.co');
        return;
      }
      
      // Extract project ID from URL
      const projectId = url.replace('https://', '').replace('.supabase.co', '');
      addLog(`üÜî ID –ø—Ä–æ–µ–∫—Ç–∞: ${projectId}`);
      
      // Test 1: Basic connectivity
      addLog(`–®–ê–ì 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –¥–æ–º–µ–Ω–∞`);
      try {
        // Try different approaches to test connectivity
        addLog('üîç –ü–æ–ø—ã—Ç–∫–∞ 1: HEAD –∑–∞–ø—Ä–æ—Å...');
        let basicResponse;
        try {
          basicResponse = await fetch(url, { 
            method: 'HEAD',
            mode: 'cors'
          });
          addLog(`üåê HEAD –∑–∞–ø—Ä–æ—Å: ‚úÖ (—Å—Ç–∞—Ç—É—Å: ${basicResponse.status})`);
        } catch (headError) {
          addLog(`‚ö†Ô∏è HEAD –∑–∞–ø—Ä–æ—Å –Ω–µ —É–¥–∞–ª—Å—è: ${headError.message}`);
          
          // Try GET request to /rest/v1/ instead
          addLog('üîç –ü–æ–ø—ã—Ç–∫–∞ 2: GET –∫ API —ç–Ω–¥–ø–æ–∏–Ω—Ç—É...');
          basicResponse = await fetch(`${url}/rest/v1/`, { 
            method: 'GET',
            mode: 'cors',
            headers: {
              'apikey': key,
              'Authorization': `Bearer ${key}`
            }
          });
          addLog(`üåê API –∑–∞–ø—Ä–æ—Å: ‚úÖ (—Å—Ç–∞—Ç—É—Å: ${basicResponse.status})`);
        }
        
        addLog(`üåê –î–æ–º–µ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω: ‚úÖ (—Å—Ç–∞—Ç—É—Å: ${basicResponse.status})`);
      } catch (domainError) {
        addLog(`‚ùå –û–®–ò–ë–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø: ${domainError.message}`);
        
        if (domainError.message.includes('Failed to fetch')) {
          addLog('üîç –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–±–ª–µ–º–∞ CORS –∏–ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞');
          addLog('üí° –ü–æ–ø—Ä–æ–±—É–µ–º –æ–±–æ–π—Ç–∏ —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π API –∑–∞–ø—Ä–æ—Å...');
          
          // Try direct API call
          try {
            const directResponse = await fetch(`${url}/rest/v1/`, {
              method: 'GET',
              headers: {
                'apikey': key,
                'Authorization': `Bearer ${key}`,
                'Content-Type': 'application/json'
              }
            });
            
            if (directResponse.ok || directResponse.status === 401) {
              addLog('‚úÖ –ü–†–û–ï–ö–¢ –î–û–°–¢–£–ü–ï–ù! –ü—Ä–æ–±–ª–µ–º–∞ –±—ã–ª–∞ –≤ CORS');
              addLog('üéâ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
            } else {
              addLog(`‚ö†Ô∏è –ü—Ä–æ–µ–∫—Ç –æ—Ç–≤–µ—á–∞–µ—Ç, –Ω–æ —Å—Ç–∞—Ç—É—Å: ${directResponse.status}`);
            }
          } catch (directError) {
            addLog(`‚ùå –ò –ø—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: ${directError.message}`);
            addLog('üö® –í–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–µ–∫—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
            return;
          }
        } else {
          addLog('üö® –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
          return;
        }
      }
      
      // Test 2: API endpoint
      addLog(`–®–ê–ì 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞`);
      try {
        const apiResponse = await fetch(`${url}/rest/v1/`, {
          method: 'HEAD'
        });
        
        addLog(`üîå –°—Ç–∞—Ç—É—Å API: ${apiResponse.status} ${apiResponse.statusText}`);
        
        if (apiResponse.status === 401) {
          addLog('‚úÖ API –≠–ù–î–ü–û–ò–ù–¢: –î–æ—Å—Ç—É–ø–µ–Ω (401 = –Ω—É–∂–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è, —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ)');
        } else if (apiResponse.ok) {
          addLog('‚úÖ API –≠–ù–î–ü–û–ò–ù–¢: –î–æ—Å—Ç—É–ø–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç');
        } else {
          addLog(`‚ö†Ô∏è API –≠–ù–î–ü–û–ò–ù–¢: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å ${apiResponse.status}`);
        }
      } catch (apiError) {
        addLog(`‚ùå –û–®–ò–ë–ö–ê API: ${apiError.message}`);
        addLog('üí° API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –ø—Ä–æ–µ–∫—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ —É–¥–∞–ª–µ–Ω');
        return;
      }
      
      // Test 3: Authentication
      addLog(`–®–ê–ì 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏`);
      try {
        const authResponse = await fetch(`${url}/rest/v1/`, {
          method: 'HEAD',
          headers: {
            'apikey': key,
            'Authorization': `Bearer ${key}`
          }
        });
        
        addLog(`üîê –°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${authResponse.status} ${authResponse.statusText}`);
        
        if (authResponse.ok) {
          addLog('‚úÖ –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø: API –∫–ª—é—á –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω');
        } else if (authResponse.status === 401) {
          addLog('‚ùå –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø: –ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á');
          addLog('üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–ª—é—á: Supabase Dashboard ‚Üí Settings ‚Üí API');
        } else {
          addLog(`‚ö†Ô∏è –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å ${authResponse.status}`);
        }
      } catch (authError) {
        addLog(`‚ùå –û–®–ò–ë–ö–ê –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò: ${authError.message}`);
      }
      
      // Test 4: Database tables
      addLog(`–®–ê–ì 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö`);
      try {
        const dbResponse = await fetch(`${url}/rest/v1/users?select=count&limit=1`, {
          method: 'HEAD',
          headers: {
            'apikey': key,
            'Authorization': `Bearer ${key}`,
            'Content-Type': 'application/json'
          }
        });
        
        addLog(`üóÑÔ∏è –°—Ç–∞—Ç—É—Å –ë–î: ${dbResponse.status} ${dbResponse.statusText}`);
        
        if (dbResponse.ok) {
          addLog('‚úÖ –ë–ê–ó–ê –î–ê–ù–ù–´–•: –¢–∞–±–ª–∏—Ü—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç –∏ –¥–æ—Å—Ç—É–ø–Ω—ã');
          addLog('üéâ –í–°–ï –†–ê–ë–û–¢–ê–ï–¢! –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ');
        } else if (dbResponse.status === 404) {
          addLog('‚ùå –ë–ê–ó–ê –î–ê–ù–ù–´–•: –¢–∞–±–ª–∏—Ü–∞ "users" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
          addLog('üí° –†–ï–®–ï–ù–ò–ï: –°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã –≤ Supabase Dashboard ‚Üí SQL Editor');
          addLog('üí° –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "Create Tables" –Ω–∏–∂–µ');
        } else {
          addLog(`‚ö†Ô∏è –ë–ê–ó–ê –î–ê–ù–ù–´–•: –°—Ç–∞—Ç—É—Å ${dbResponse.status}`);
        }
      } catch (dbError) {
        addLog(`‚ùå –û–®–ò–ë–ö–ê –ë–î: ${dbError.message}`);
      }
      
      addLog('üèÅ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê');
      
    } catch (error) {
      addLog(`‚ùå –û–®–ò–ë–ö–ê –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò: ${error}`);
    } finally {
      setLoading(false);
    }
  };

  const checkEnvironment = () => {
    addLog('üîç ENVIRONMENT VARIABLE CHECK...');
    
    const url = import.meta.env.VITE_SUPABASE_URL;
    const key = import.meta.env.VITE_SUPABASE_ANON_KEY;
    
    addLog(`üìç VITE_SUPABASE_URL: ${url ? '‚úÖ Set' : '‚ùå Missing'}`);
    addLog(`üîë VITE_SUPABASE_ANON_KEY: ${key ? '‚úÖ Set' : '‚ùå Missing'}`);
    
    if (url) {
      addLog(`üìç URL Preview: ${url.substring(0, 50)}...`);
      addLog(`üìç URL Length: ${url.length} characters`);
      addLog(`üìç Contains supabase.co: ${url.includes('supabase.co') ? '‚úÖ' : '‚ùå'}`);
      addLog(`üìç Starts with https: ${url.startsWith('https://') ? '‚úÖ' : '‚ùå'}`);
      addLog(`üìç Ends correctly: ${url.endsWith('.supabase.co') ? '‚úÖ' : '‚ùå'}`);
    }
    
    if (key) {
      addLog(`üîë Key Length: ${key.length} characters`);
      addLog(`üîë Starts with eyJ: ${key.startsWith('eyJ') ? '‚úÖ' : '‚ùå'}`);
      addLog(`üîë Contains dots: ${key.includes('.') ? '‚úÖ' : '‚ùå'}`);
    }
    
    // Check .env file existence
    addLog('üìÅ Environment source: Vite build-time variables');
    addLog('üí° Variables are loaded at build time, not runtime');
  };

  const testRawFetch = async () => {
    setLoading(true);
    try {
      addLog('üåê RAW FETCH TEST...');
      
      const url = import.meta.env.VITE_SUPABASE_URL;
      if (!url) {
        addLog('‚ùå No URL to test');
        return;
      }
      
      addLog(`üéØ Testing URL: ${url}`);
      
      // Test 1: Basic connectivity
      addLog('üì° Test 1: Basic connectivity (no auth)...');
      try {
        const basicResponse = await fetch(url, { method: 'HEAD' });
        addLog(`üì° Basic fetch: ${basicResponse.status} ${basicResponse.statusText}`);
      } catch (basicError) {
        addLog(`‚ùå Basic fetch failed: ${basicError}`);
      }
      
      // Test 2: With API key
      addLog('üîë Test 2: With API key...');
      try {
        const authResponse = await fetch(`${url}/rest/v1/`, {
          method: 'HEAD',
          headers: {
            'apikey': import.meta.env.VITE_SUPABASE_ANON_KEY,
            'Authorization': `Bearer ${import.meta.env.VITE_SUPABASE_ANON_KEY}`
          }
        });
        addLog(`üîë Auth fetch: ${authResponse.status} ${authResponse.statusText}`);
      } catch (authError) {
        addLog(`‚ùå Auth fetch failed: ${authError}`);
      }
      
    } catch (error) {
      addLog(`‚ùå RAW FETCH ERROR: ${error}`);
    } finally {
      setLoading(false);
    }
  };

  const clearLogs = () => {
    setLogs([]);
  };

  if (!isOpen) {
    return (
      <button
        className="debug-toggle"
        onClick={() => setIsOpen(true)}
        title="Open Debug Panel"
      >
        <Bug size={16} />
      </button>
    );
  }

  return (
    <div className="debug-panel">
      <div className="debug-header">
        <h3>üêõ Debug Panel</h3>
        <button onClick={() => setIsOpen(false)}>√ó</button>
      </div>

      <div className="debug-section">
        <h4>Database Tests</h4>
        <div className="debug-buttons">
          <button 
            className="debug-button"
            onClick={checkEnvironment}
            disabled={loading}
          >
            <Settings size={14} />
            Check Environment
          </button>
          
          <button 
            className="debug-button"
            onClick={testConnection}
            disabled={loading}
          >
            <Wifi size={14} />
            Test Direct Connection
          </button>
          
          <button 
            className="debug-button"
            onClick={() => {
              addLog('üöÄ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ô –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò...');
              addLog('–≠—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥...');
              testDetailedConnection();
            }}
            disabled={loading}
          >
            <Database size={14} />
            –ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
          </button>
          
          <button 
            className="debug-button"
            onClick={() => {
              addLog('üîß –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ê–ö–¢–ò–í–ù–û–ì–û –ü–†–û–ï–ö–¢–ê:');
              addLog('');
              addLog('–ï—Å–ª–∏ –≤–∞—à –ø—Ä–æ–µ–∫—Ç –∞–∫—Ç–∏–≤–µ–Ω, –Ω–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:');
              addLog('');
              addLog('1. üåê CORS –ø—Ä–æ–±–ª–µ–º—ã');
              addLog('   ‚Üí –ë—Ä–∞—É–∑–µ—Ä –±–ª–æ–∫–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å—ã');
              addLog('   ‚Üí –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏');
              addLog('');
              addLog('2. üóÑÔ∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç–∞–±–ª–∏—Ü—ã –ë–î');
              addLog('   ‚Üí –ù—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
              addLog('   ‚Üí –ù–∞–∂–º–∏—Ç–µ "–°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã" –Ω–∏–∂–µ');
              addLog('');
              addLog('3. üîë –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ API –∫–ª—é—á–∏');
              addLog('   ‚Üí –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤ Dashboard ‚Üí Settings ‚Üí API');
              addLog('');
              addLog('üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ "–°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã" - —ç—Ç–æ —Ä–µ—à–∏—Ç –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –ø—Ä–æ–±–ª–µ–º!');
            }}
            disabled={loading}
          >
            <Settings size={14} />
            üîß –ü—Ä–æ–µ–∫—Ç –∞–∫—Ç–∏–≤–µ–Ω, –Ω–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
          </button>
          
          <button 
            className="debug-button"
            onClick={() => {
              addLog('üÜï –°–û–ó–î–ê–ù–ò–ï –ù–û–í–û–ì–û –ü–†–û–ï–ö–¢–ê SUPABASE:');
              addLog('');
              addLog('1. –û—Ç–∫—Ä–æ–π—Ç–µ: https://supabase.com/dashboard/new');
              addLog('2. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: gramvpn-new)');
              addLog('3. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω (Europe –¥–ª—è –ª—É—á—à–µ–π —Å–∫–æ—Ä–æ—Å—Ç–∏)');
              addLog('4. –°–æ–∑–¥–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –ë–î');
              addLog('5. –ù–∞–∂–º–∏—Ç–µ "Create new project"');
              addLog('6. –ü–æ–¥–æ–∂–¥–∏—Ç–µ 2-3 –º–∏–Ω—É—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è');
              addLog('7. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –Ω–æ–≤—ã–µ URL –∏ API Key');
              addLog('8. –ù–∞–∂–º–∏—Ç–µ "Connect to Supabase" –≤ –ø—Ä–∞–≤–æ–º —É–≥–ª—É');
              addLog('9. –í—Å—Ç–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ');
              addLog('10. –í–µ—Ä–Ω–∏—Ç–µ—Å—å —Å—é–¥–∞ –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ');
            }}
            disabled={loading}
          >
            <Settings size={14} />
            –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç
          </button>
          
          <button 
            className="debug-button"
            onClick={testCreateUser}
            disabled={loading}
          >
            <User size={14} />
            Test User Creation
          </button>
          
          <button 
            className="debug-button"
            onClick={() => {
              addLog('üîç CHECKING USER CREATION REQUIREMENTS...');
              addLog('');
              addLog('‚úÖ Requirements checklist:');
              addLog('1. Supabase URL configured: ' + (import.meta.env.VITE_SUPABASE_URL ? '‚úÖ' : '‚ùå'));
              addLog('2. Supabase API key configured: ' + (import.meta.env.VITE_SUPABASE_ANON_KEY ? '‚úÖ' : '‚ùå'));
              addLog('3. Database tables exist: ‚ùì (test with "Test Connection")');
              addLog('4. RLS policies allow insert: ‚ùì (test with "Test User Creation")');
              addLog('');
              addLog('üí° If any ‚ùå - fix that first');
              addLog('üí° If all ‚úÖ but still fails - check Supabase Dashboard logs');
            }}
            disabled={loading}
          >
            <Settings size={14} />
            Check Requirements
          </button>
          
          <button 
            className="debug-button"
            onClick={async () => {
              addLog('üîç TESTING TABLE ACCESS...');
              
              if (!import.meta.env.VITE_SUPABASE_URL || !import.meta.env.VITE_SUPABASE_ANON_KEY) {
                addLog('‚ùå Supabase not configured');
                return;
              }
              
              try {
                // Test if we can read from users table
                addLog('üì° Testing SELECT from users table...');
                const response = await fetch(`${import.meta.env.VITE_SUPABASE_URL}/rest/v1/users?select=id&limit=1`, {
                  method: 'GET',
                  headers: {
                    'apikey': import.meta.env.VITE_SUPABASE_ANON_KEY,
                    'Authorization': `Bearer ${import.meta.env.VITE_SUPABASE_ANON_KEY}`,
                    'Content-Type': 'application/json'
                  }
                });
                
                addLog(`üì° SELECT response: ${response.status} ${response.statusText}`);
                
                if (response.ok) {
                  const data = await response.json();
                  addLog('‚úÖ Table exists and readable');
                  addLog(`üìä Current users count: ${data.length}`);
                } else if (response.status === 404) {
                  addLog('‚ùå Table "users" does not exist');
                  addLog('üí° Create tables in Supabase Dashboard ‚Üí SQL Editor');
                } else if (response.status === 401) {
                  addLog('‚ùå Authentication failed - check API key');
                } else {
                  const errorText = await response.text();
                  addLog(`‚ùå Unexpected error: ${errorText}`);
                }
              } catch (error) {
                addLog(`‚ùå Network error: ${error}`);
              }
            }}
            disabled={loading}
          >
            <Database size={14} />
            Test Table Access
          </button>
          
          <button 
            className="debug-button"
            onClick={() => {
              addLog('üéØ Testing VPN service in mock mode...');
              testCreateUser();
            }}
            disabled={loading || !user}
          >
            <Database size={14} />
            Test Mock Mode
          </button>
          
          <button 
            className="debug-button"
            onClick={() => {
              addLog('üîß RLS –ü–û–õ–ò–¢–ò–ö–ò - –ü–û–®–ê–ì–û–í–û–ï –†–ï–®–ï–ù–ò–ï:');
              addLog('');
              addLog('–ü–†–û–ë–õ–ï–ú–ê: –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ INSERT –≤ —Ç–∞–±–ª–∏—Ü—É users');
              addLog('–ü–†–ò–ß–ò–ù–ê: –°—Ç—Ä–æ–≥–∏–µ RLS –ø–æ–ª–∏—Ç–∏–∫–∏ –±–ª–æ–∫–∏—Ä—É—é—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
              addLog('');
              addLog('üîß –†–ï–®–ï–ù–ò–ï:');
              addLog('1. –û—Ç–∫—Ä–æ–π—Ç–µ Supabase Dashboard ‚Üí SQL Editor');
              addLog('2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —ç—Ç–æ—Ç SQL:');
              addLog('');
              addLog('-- –£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –ø–æ–ª–∏—Ç–∏–∫–∏');
              addLog('DROP POLICY IF EXISTS "Users can manage own data" ON users;');
              addLog('DROP POLICY IF EXISTS "Users can create own account" ON users;');
              addLog('DROP POLICY IF EXISTS "Users can read own data" ON users;');
              addLog('');
              addLog('-- –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–µ –ø—Ä–æ—Å—Ç—ã–µ –ø–æ–ª–∏—Ç–∏–∫–∏');
              addLog('CREATE POLICY "Allow user creation" ON users');
              addLog('  FOR INSERT TO anon, authenticated WITH CHECK (true);');
              addLog('');
              addLog('CREATE POLICY "Allow user read" ON users');
              addLog('  FOR SELECT TO anon, authenticated USING (true);');
              addLog('');
              addLog('CREATE POLICY "Allow user update" ON users');
              addLog('  FOR UPDATE TO anon, authenticated USING (true);');
              addLog('');
              addLog('3. –ù–∞–∂–º–∏—Ç–µ "Run" –≤ SQL Editor');
              addLog('4. –í–µ—Ä–Ω–∏—Ç–µ—Å—å —Å—é–¥–∞ –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
              addLog('');
              addLog('üí° –≠—Ç–∏ –ø–æ–ª–∏—Ç–∏–∫–∏ —Ä–∞–∑—Ä–µ—à–∞—é—Ç –≤—Å–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏');
              addLog('üí° –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞—Ç—å –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–µ');
            }}
            disabled={loading}
          >
            <Settings size={14} />
            üîß –ò—Å–ø—Ä–∞–≤–∏—Ç—å RLS –ø–æ–ª–∏—Ç–∏–∫–∏
          </button>
          
          <button 
            className="debug-button"
            onClick={() => {
              addLog('üìã –ü–û–õ–ù–´–ô SQL –î–õ–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø RLS:');
              addLog('');
              addLog('-- –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤–µ—Å—å —ç—Ç–æ—Ç –±–ª–æ–∫ –≤ Supabase SQL Editor:');
              addLog('');
              addLog('-- 1. –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ –ø–æ–ª–∏—Ç–∏–∫–∏');
              addLog('DROP POLICY IF EXISTS "Users can manage own data" ON users;');
              addLog('DROP POLICY IF EXISTS "Users can create own account" ON users;');
              addLog('DROP POLICY IF EXISTS "Users can read own data" ON users;');
              addLog('DROP POLICY IF EXISTS "Users can update own data" ON users;');
              addLog('DROP POLICY IF EXISTS "Service role can manage all users" ON users;');
              addLog('');
              addLog('-- 2. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –ø—Ä–æ—Å—Ç—ã–µ –ø–æ–ª–∏—Ç–∏–∫–∏');
              addLog('CREATE POLICY "Allow user creation" ON users');
              addLog('  FOR INSERT TO anon, authenticated WITH CHECK (true);');
              addLog('');
              addLog('CREATE POLICY "Allow user read" ON users');
              addLog('  FOR SELECT TO anon, authenticated USING (true);');
              addLog('');
              addLog('CREATE POLICY "Allow user update" ON users');
              addLog('  FOR UPDATE TO anon, authenticated USING (true);');
              addLog('');
              addLog('CREATE POLICY "Service role full access" ON users');
              addLog('  FOR ALL TO service_role USING (true);');
              addLog('');
              addLog('-- 3. –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∞–±–ª–∏—Ü');
              addLog('CREATE POLICY "Allow subscription operations" ON subscriptions');
              addLog('  FOR ALL TO anon, authenticated USING (true);');
              addLog('');
              addLog('CREATE POLICY "Allow referral operations" ON referral_bonuses');
              addLog('  FOR ALL TO anon, authenticated USING (true);');
              addLog('');
              addLog('üí° –ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL - –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!');
            }}
            disabled={loading}
          >
            <Database size={14} />
            üìã –ü–æ–ª–Ω—ã–π SQL –¥–ª—è RLS
          </button>
        </div>
      </div>

      <div className="debug-section">
        <div className="debug-logs-header">
          <h4>Logs</h4>
          <button className="clear-logs" onClick={clearLogs}>
            <Trash2 size={12} />
            Clear
          </button>
        </div>
        <div className="debug-logs">
          {logs.length === 0 ? (
            <div className="no-logs">No logs yet. Run some tests!</div>
          ) : (
            logs.map((log, index) => (
              <div key={index} className="log-entry">
                {log}
              </div>
            ))
          )}
        </div>
      </div>

      {user && (
        <div className="debug-section">
          <h4>Current User Data</h4>
          <pre className="user-data">
            {JSON.stringify(user, null, 2)}
          </pre>
        </div>
      )}

      <div className="debug-section">
        <h4>Environment Status</h4>
        <div className="env-status">
          <div className="env-item">
            <span>Supabase URL:</span>
            <span className={import.meta.env.VITE_SUPABASE_URL ? 'status-ok' : 'status-error'}>
              {import.meta.env.VITE_SUPABASE_URL ? `‚úÖ ${import.meta.env.VITE_SUPABASE_URL.substring(0, 30)}...` : '‚ùå Missing'}
            </span>
          </div>
          <div className="env-item">
            <span>Supabase Key:</span>
            <span className={import.meta.env.VITE_SUPABASE_ANON_KEY ? 'status-ok' : 'status-error'}>
              {import.meta.env.VITE_SUPABASE_ANON_KEY ? `‚úÖ ${import.meta.env.VITE_SUPABASE_ANON_KEY.substring(0, 20)}...` : '‚ùå Missing'}
            </span>
          </div>
          <div className="env-item">
            <span>URL Format:</span>
            <span className={import.meta.env.VITE_SUPABASE_URL?.includes('supabase.co') ? 'status-ok' : 'status-error'}>
              {import.meta.env.VITE_SUPABASE_URL?.includes('supabase.co') ? '‚úÖ Valid' : '‚ùå Invalid'}
            </span>
          </div>
          <div className="env-item">
            <span>Key Format:</span>
            <span className={import.meta.env.VITE_SUPABASE_ANON_KEY?.startsWith('eyJ') ? 'status-ok' : 'status-error'}>
              {import.meta.env.VITE_SUPABASE_ANON_KEY?.startsWith('eyJ') ? '‚úÖ Valid JWT' : '‚ùå Invalid'}
            </span>
          </div>
        </div>
      </div>
    </div>
  );
};